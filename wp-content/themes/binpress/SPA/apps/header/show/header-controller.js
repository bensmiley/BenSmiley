// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['app', 'base-controller', 'entities/user-entities'], function(App, AppController, Entity) {
  return App.module('HeaderApp.Show', function(Show, App, Backbone, Marionette, $, _) {
    var HeaderView, UserDisplayView;
    Show.Controller = (function(_super) {
      __extends(Controller, _super);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype.initialize = function(opt) {
        if (opt == null) {
          opt = {};
        }
        this.layout = this.getLayout();
        this.listenTo(this.layout, "show", this.showUserDisplayView);
        return this.show(this.layout);
      };

      Controller.prototype.getLayout = function() {
        return new HeaderView;
      };

      Controller.prototype.showUserDisplayView = function() {
        var usermodel;
        this.usermodel = usermodel = App.request("get:user:model");
        this.userDisplayView = this.getUserDisplayView(this.usermodel);
        console.log(this.usermodel);
        return App.execute("when:fetched", [this.usermodel], (function(_this) {
          return function() {
            console.log(_this.usermodel);
            return _this.layout.userDisplayRegion.show(_this.userDisplayView);
          };
        })(this));
      };

      Controller.prototype.getUserDisplayView = function(usermodel) {
        return new UserDisplayView({
          model: usermodel
        });
      };

      return Controller;

    })(AppController);
    HeaderView = (function(_super) {
      __extends(HeaderView, _super);

      function HeaderView() {
        return HeaderView.__super__.constructor.apply(this, arguments);
      }

      HeaderView.prototype.template = '<div class="navbar-inner"> <div class=""> <div class="pull-left"> <a href="index.html"> <h3 class="p-l-20 text-white">Logo</h3></a> </div> <div id="userDisplay"></div> </div> </div>';

      HeaderView.prototype.className = 'header navbar navbar-inverse';

      HeaderView.prototype.regions = {
        userDisplayRegion: '#userDisplay'
      };

      return HeaderView;

    })(Marionette.Layout);
    return UserDisplayView = (function(_super) {
      __extends(UserDisplayView, _super);

      function UserDisplayView() {
        return UserDisplayView.__super__.constructor.apply(this, arguments);
      }

      UserDisplayView.prototype.template = '<div class="user-profile pull-left m-t-10"> <img src="assets/img/profiles/avatar_small.jpg" alt="" data-src="assets/img/profiles/avatar_small.jpg" data-src-retina="assets/img/profiles/avatar_small2x.jpg" width="35" height="35"> </div> <ul class="nav quick-section "> <li class="quicklinks"> <a data-toggle="dropdown" class="dropdown-toggle  pull-right " href="#" id="user-options"> <div class="pull-left"> <span class="bold">a{{display_name}}</span></div> &nbsp; <div class="iconset top-down-arrow pull-left m-t-5 m-l-10"></div> </a> <ul class="dropdown-menu  pull-right" role="menu" aria-labelledby="user-options"> <li><a href="login.html"><i class="fa fa-power-off"></i>&nbsp;&nbsp;Log Out</a></li> </ul> </li> </ul> ';

      UserDisplayView.prototype.className = 'pull-right';

      UserDisplayView.prototype.onShow = function() {
        console.log(this.model);
        return console.log(this.model.get('display_name'));
      };

      UserDisplayView.prototype.serializeData = function() {
        var data;
        data = UserDisplayView.__super__.serializeData.call(this);
        data;
        return console.log(data);
      };

      return UserDisplayView;

    })(Marionette.ItemView);
  });
});
