// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['marionette', 'text!apps/plans/templates/changePlanLayout.html', 'text!apps/payment/templates/paymentForm.html', 'braintree', 'card'], function(Marionette, changePlanTpl, paymentFormTpl, BrainTree, card) {
  var ActiveSubscriptionView, ChangePlanLayout, PaymentCardView, PaymentFormView, SelectedPlanView;
  ChangePlanLayout = (function(_super) {
    __extends(ChangePlanLayout, _super);

    function ChangePlanLayout() {
      return ChangePlanLayout.__super__.constructor.apply(this, arguments);
    }

    ChangePlanLayout.prototype.template = changePlanTpl;

    ChangePlanLayout.prototype.regions = {
      activeSubscriptionRegion: '#active-subscription',
      selectedPlanRegion: '#selected-plan',
      paymentViewRegion: '#payment-form'
    };

    return ChangePlanLayout;

  })(Marionette.Layout);
  ActiveSubscriptionView = (function(_super) {
    __extends(ActiveSubscriptionView, _super);

    function ActiveSubscriptionView() {
      return ActiveSubscriptionView.__super__.constructor.apply(this, arguments);
    }

    ActiveSubscriptionView.prototype.template = ' <div class="col-md-3"> <div class="tiles-body"> <div > ACTIVE PLAN </div> <div class="heading"> <span class="animate-number" >{{plan_name}}</span> </div> </div> </div> <div class="col-md-3"> <div class="tiles-body"> <div > ACTIVE SINCE </div> <div class="heading"> <span class="animate-number" >{{start_date}}</span> </div> </div> </div>';

    ActiveSubscriptionView.prototype.className = 'row';

    return ActiveSubscriptionView;

  })(Marionette.ItemView);
  SelectedPlanView = (function(_super) {
    __extends(SelectedPlanView, _super);

    function SelectedPlanView() {
      return SelectedPlanView.__super__.constructor.apply(this, arguments);
    }

    SelectedPlanView.prototype.template = '<h4 class="semi-bold">Selected plan</h3> <div class="grid simple"> <h3 class="bold text-center">{{plan_name}}<br> <small class="text-danger"> Rs.{{price}}/month</small> </h2> <hr> <ul class="list-unstyled text-center"> <li>Multiple Email Accounts</li> <li>99.9% Uptime</li> <li>Enterprise Level Storage</li> <li>Fully Managed VPS</li> <li>Reliable 24/7/365 Support</li> <li>Enterprise Level Storage</li> <li>Fully Managed VPS</li> <li>Reliable 24/7/365 Support</li> </ul> <p class="text-danger">Note:</p> <p class="text-muted">Any change of plans in the midddle of cycle will be applicable from new cycle</p> </div>';

    SelectedPlanView.prototype.className = 'alert alert-info';

    return SelectedPlanView;

  })(Marionette.ItemView);
  PaymentCardView = (function(_super) {
    __extends(PaymentCardView, _super);

    function PaymentCardView() {
      return PaymentCardView.__super__.constructor.apply(this, arguments);
    }

    PaymentCardView.prototype.template = '<div class="well well-large" style="background-color: #E4E4E4;"> <h3><span class="semi-bold">Card Details</span></h3> <div class="row"> <div class="col-md-3"> <B>Card Name</B> <h3>{{customer_name}}</h3> </div> <div class="col-md-4"> <B>Card Number</B> <h3>{{card_number}}</h3> </div> <div class="col-md-2"> <B>Card Expiry</B> <h3>{{expiration_date}}</h3> </div> <div class="col-md-2"> <B>CVC</B> <input placeholder="" type="text" name="name" class="m-t-5"> </div> </div> </div>';

    return PaymentCardView;

  })(Marionette.ItemView);
  PaymentFormView = (function(_super) {
    __extends(PaymentFormView, _super);

    function PaymentFormView() {
      return PaymentFormView.__super__.constructor.apply(this, arguments);
    }

    PaymentFormView.prototype.template = '<div class="col-md-6"> <div class="card-wrapper"></div> </div> <div class="col-md-6"> <div class="form-container active"> <form id="payment-form" autocomplete="off"> Enter your card information below. You will receive a notification confirming your payment shortly in your registered email. Once the payment is processed you will get an invoice in your registered email address.<br><br> <div class="row form-row"> <div class="col-md-5"> <input placeholder="Card number" type="text" class="form-control" data-encrypted-name="credit_card_number" id="credit_card_number"> </div> <div class="col-md-7"> <input placeholder="Full name" type="text" data-encrypted-name="cardholder_name" class="form-control" id="cardholder_name"> </div> <div class="col-md-3"> <input placeholder="MM/YY" type="text" class="form-control" data-encrypted-name="expiration_date" id="expiration_date"> </div> <div class="col-md-3"> <input placeholder="CVC" type="text" class="form-control" data-encrypted-name="credit_card_cvv" id="credit_card_cvv"> </div> <div class="col-md-5"> <button type="button" class="btn btn-primary btn-cons" id="submit"> <i class="icon-ok"></i> Submit </button> </div> </div> </form> </div> <div id="success-msg"></div> </div>';

    PaymentFormView.prototype.onShow = function() {
      return this.$el.find('.active form').card({
        container: this.$el.find('.card-wrapper')
      });
    };

    PaymentFormView.prototype.onPaymentSucess = function(response) {
      var msg, msgText;
      this.$el.find('#success-msg').empty();
      msgText = response.msg;
      msg = "<div class='alert alert-success'> <button class='close' data-dismiss='alert'>&times;</button> " + msgText + "<div>";
      return this.$el.find('#success-msg').append(msg);
    };

    PaymentFormView.prototype.events = function() {
      return {
        'click #submit': function() {
          var braintree, cardholderName, clientSideEncryptionKey, creditCardCvv, creditCardNumber, data, expirationDate;
          creditCardNumber = this.$el.find('#credit_card_number').val();
          cardholderName = this.$el.find('#cardholder_name').val();
          expirationDate = this.$el.find('#expiration_date').val();
          creditCardCvv = this.$el.find('#credit_card_cvv').val();
          clientSideEncryptionKey = "MIIBCgKCAQEA0fQXY7zHRl2PSEoZGOWDseI9MTDz2eO45C5M27KhN/HJXqi7sj8UDybrZJdsK+QL4Cw55r285Eeka+a5tAciEqd3E6YXkNokVmgo6/Wg21vYJKRvcnLkPE+J5iBFfQBBEMNKZMALl1P7HHkfOJsFZNO9+YOfiE+wl0QC8SnjZApftJ69ibbuFdFSR3L4kP6tZSQWeJS9WnkDzxGvRUyGFfs26x/q7Kxn+hdXkxTDd1o8FhjTCP/EkmHxhhJyYgzagtbJ84nxaLBuz6yW8bx5Qwt1ZiWUVVUIJlMiQtXUP05CId+aMIV8wX3OWtyAmTpn8N++tXYGjt/kY/bf8oY3yQIDAQAB";
          braintree = Braintree.create(clientSideEncryptionKey);
          creditCardNumber = braintree.encrypt(creditCardNumber);
          cardholderName = braintree.encrypt(cardholderName);
          expirationDate = braintree.encrypt(expirationDate);
          creditCardCvv = braintree.encrypt(creditCardCvv);
          data = {
            'creditCardNumber': creditCardNumber,
            'cardholderName': cardholderName,
            'expirationDate': expirationDate,
            'creditCardCvv': creditCardCvv,
            'braintree_customer_id': this.model.get('braintree_customer_id')
          };
          return this.trigger("user:credit:card:details", data);
        }
      };
    };

    return PaymentFormView;

  })(Marionette.ItemView);
  return {
    ChangePlanLayout: ChangePlanLayout,
    ActiveSubscriptionView: ActiveSubscriptionView,
    SelectedPlanView: SelectedPlanView,
    PaymentCardView: PaymentCardView,
    PaymentFormView: PaymentFormView
  };
});
