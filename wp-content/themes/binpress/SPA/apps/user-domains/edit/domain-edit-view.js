// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['marionette', 'text!apps/user-domains/templates/addEditUserDomain.html'], function(Marionette, addEditUserDomainTpl) {
  var DomainEditView;
  DomainEditView = (function(_super) {
    __extends(DomainEditView, _super);

    function DomainEditView() {
      return DomainEditView.__super__.constructor.apply(this, arguments);
    }

    DomainEditView.prototype.className = 'add-user-domain-container';

    DomainEditView.prototype.template = addEditUserDomainTpl;

    DomainEditView.prototype.events = {
      'click #btn-add-edit-user-domain': function() {
        var domaindata;
        if (this.$el.find('#add-edit-user-domain-form').valid()) {
          domaindata = Backbone.Syphon.serialize(this);
          return this.trigger("add:edit:user:domain:clicked", domaindata);
        }
      },
      'click #show-domain-list': function() {
        return this.trigger("show:domain:list:clicked");
      }
    };

    DomainEditView.prototype.regions = {
      addDomainGroupRegion: '#add-domain-group'
    };

    DomainEditView.prototype.onShow = function() {
      this.$el.find('#form-title').text('Edit Domain');
      this.$el.find('#domain-groups').css({
        'display': 'inline'
      });
      return this.$el.find('#add-edit-user-domain-form').validate(this.validationOptions());
    };

    DomainEditView.prototype.onUserDomainAddUpdate = function() {
      var msg, successhtml;
      this.$el.find('#btn-reset-add-domain').click();
      this.$el.find('#msg').empty();
      if (_.isUndefined(this.model)) {
        msg = "Domain Sucessfully Added";
      } else {
        msg = "Domain Updated Sucessfully";
      }
      successhtml = "<div class='alert alert-success'> <button class='close' data-dismiss='alert'>&times;</button>" + msg + "<div>";
      return this.$el.find('#msg').append(successhtml);
    };

    DomainEditView.prototype.validationOptions = function() {
      return {
        rules: {
          post_title: {
            required: true
          },
          domain_url: {
            required: true,
            url: true
          }
        },
        messages: {
          domain_url: 'Enter valid url'
        }
      };
    };

    return DomainEditView;

  })(Marionette.Layout);
  return DomainEditView;
});
